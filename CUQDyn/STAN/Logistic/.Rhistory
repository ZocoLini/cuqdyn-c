lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=bwRT,kernel=gaussK,deg=1)
plot(y~x,pch=16,main="Peri vs. Area")
lines(lpls1$lpFit,col=2)
lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=5000,kernel=gaussK,deg=1)
lpls2<-locpol(y~x,as.data.frame(cbind(x,y)),bw=5000,kernel=gaussK,deg=1)
plot(y~x,pch=16,main="Peri vs. Area",xlav="Area",ylab="Peri")
lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=5000,kernel=gaussK,deg=1)
library(ks)
library(stats)
library(sm)
library(nor1mix)
library(feature)
library(multimode)
library(MASS)
library(ks)
library(PLRModels) #for CV bandwidth
library(locpol) #for local polinomial smoothing
library(KernSmooth) #for plug-in bandwidth
library(lokern) #local plug-in bandwidth
data(rock)
y<-rock$peri
plot(density(y,kernel="gaussian"),col="red");rug(y)
sizer(y)
x<-rock$area
plot(y~x,pch=16,main="Peri vs. Area")
bwCV<-regCVBwSelC(x,y,deg=1,kernel=gaussK)
lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=bwRT,kernel=gaussK,deg=1)
plot(y~x,pch=16,main="Peri vs. Area",xlav="Area",ylab="Peri")
bwCV<-regCVBwSelC(x,y,deg=1,kernel=gaussK)
lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=bwCV,kernel=gaussK,deg=1)
data(rock)
y<-rock$peri
plot(density(y,kernel="gaussian"),col="red");rug(y)
sizer(y)
x<-rock$area
plot(y~x,pch=16,main="Peri vs. Area")
bwCV<-regCVBwSelC(x,y,deg=1,kernel=gaussK)
lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=bwCV,kernel=gaussK,deg=1)
warnings()
bwRT<-thumbBw(x,y,deg=1,kernel=gaussK)
lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=bwRT,kernel=gaussK,deg=1)
plot(y~x,pch=16,main="Peri vs. Area",xlav="Area",ylab="Peri")
plot(y~x,pch=16,main="Peri vs. Area",xlab="Area",ylab="Peri")
lines(lpls1$lpFit,col=2)
lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=5000,kernel=gaussK,deg=1)
plot(y~x,pch=16,main="Peri vs. Area",xlav="Area",ylab="Peri")
lines(lpls2$lpFit,col=2)
lines(lpls1$lpFit,col=2)
lpls1<-locpol(y~x,as.data.frame(cbind(x,y)),bw=10000,kernel=gaussK,deg=1)
plot(y~x,pch=16,main="Peri vs. Area",xlav="Area",ylab="Peri")
lines(lpls1$lpFit,col=2)
R.version
#########################################################
#- Estimación del modelo de Ornstein-Uhlenbeck-Vasicek -#
#-          mediante pseudo-verosimilitud              -#
#########################################################
#-- Simulamos el proceso mediante la función sde.sim del paquete sde
library(sde)
set.seed(5699)
x0=10      # Valor inicial del proceso
mu=3       # Valor central del proceso
th=3.0  # exp(-theta) es la tasa de regresión al valor central
sig=0.5  # Volatilidad (desviación típica por unidad de tiempo)
m=100
ext_inf_mu<-numeric(m)
ext_sup_mu<-numeric(m)
ext_inf_th<-numeric(m)
ext_sup_th<-numeric(m)
T=1    # Longitud del intervalo de observación
n=1000  # Número de observaciones (equi-espaciadas en el tiempo)
t=seq(0,T,by=T/n)   # Rejilla de tiempos
d=expression(th*(mu-x))
s=expression(sig)
#-- Densidad condicional
dcOU.Euler=function(xnew,xold,dt,mu,th){
b=th*(mu-xold)
(xnew-xold)*b-0.5*dt*b^2}
#-- Función de -log(verosimilitud)
OU.veros.Euler=function(mu,th){
n=length(X)
dt=t[2:n]-t[1:(n-1)]
-sum( dcOU.Euler(X[2:n],X[1:(n-1)],dt,mu,th) )  }
for (i in 1:m){
X=sde.sim(t0=0,T=6,X0=x0,N=n,drift=d,sigma=s,sigma.x=expression(0))
ajuste=mle(OU.veros.Euler,start=list(mu=5,th=5),method="L-BFGS-B")
intervalos<-as.matrix(confint(ajuste))
ext_inf_mu[i]<-intervalos[1,1]
ext_sup_mu[i]<-intervalos[1,2]
ext_inf_th[i]<-intervalos[2,1]
ext_sup_th[i]<-intervalos[2,2]
if (i==10*round(i/10)){
cat('i=',i,'mu=(',ext_inf_mu[i],',',ext_sup_mu[i],'),th=(',
ext_inf_th[i],',',ext_sup_th[i],')','\n')}
}
#Cobertura de los intervalos
(cobertura_mu=sum((ext_inf_mu<mu)&(ext_sup_mu>mu))/m)
(cobertura_th=sum((ext_inf_th<th)&(ext_sup_th>th))/m)
mean(ext_inf_mu) #Extremo inferior promedio del intervalo para mu
mean(ext_sup_mu) #Extremo superior promedio del intervalo para mu
mean(ext_inf_th) #Extremo inferior promedio del intervalo para theta
mean(ext_sup_th) #Extremo superior promedio del intervalo para theta
library(sde)
set.seed(5699)
x0=10      # Valor inicial del proceso
mu=3       # Valor central del proceso
th=3.0  # exp(-theta) es la tasa de regresión al valor central
sig=0.5  # Volatilidad (desviación típica por unidad de tiempo)
m=100
ext_inf_mu<-numeric(m)
ext_sup_mu<-numeric(m)
ext_inf_th<-numeric(m)
ext_sup_th<-numeric(m)
T=1    # Longitud del intervalo de observación
n=1000  # Número de observaciones (equi-espaciadas en el tiempo)
t=seq(0,T,by=T/n)   # Rejilla de tiempos
d=expression(th*(mu-x))
s=expression(sig)
#-- Densidad condicional
dcOU.Euler=function(xnew,xold,dt,mu,th){
b=th*(mu-xold)
(xnew-xold)*b-0.5*dt*b^2}
#-- Función de -log(verosimilitud)
OU.veros.Euler=function(mu,th){
n=length(X)
dt=t[2:n]-t[1:(n-1)]
-sum( dcOU.Euler(X[2:n],X[1:(n-1)],dt,mu,th) )  }
for (i in 1:m){
X=sde.sim(t0=0,T=1,X0=x0,N=n,drift=d,sigma=s,sigma.x=expression(0))
ajuste=mle(OU.veros.Euler,start=list(mu=5,th=5),method="L-BFGS-B")
intervalos<-as.matrix(confint(ajuste))
ext_inf_mu[i]<-intervalos[1,1]
ext_sup_mu[i]<-intervalos[1,2]
ext_inf_th[i]<-intervalos[2,1]
ext_sup_th[i]<-intervalos[2,2]
if (i==10*round(i/10)){
cat('i=',i,'mu=(',ext_inf_mu[i],',',ext_sup_mu[i],'),th=(',
ext_inf_th[i],',',ext_sup_th[i],')','\n')}
}
#Cobertura de los intervalos
(cobertura_mu=sum((ext_inf_mu<mu)&(ext_sup_mu>mu))/m)
(cobertura_th=sum((ext_inf_th<th)&(ext_sup_th>th))/m)
mean(ext_inf_mu) #Extremo inferior promedio del intervalo para mu
mean(ext_sup_mu) #Extremo superior promedio del intervalo para mu
mean(ext_inf_th) #Extremo inferior promedio del intervalo para theta
mean(ext_sup_th) #Extremo superior promedio del intervalo para theta
library(lpSolve)
A<-matrix(c(1,3,2,2,3,4,0,0,0),nrow=3,byrow=TRUE)
install.packages(lpSolve)
library(lpSolve)
library("lpSolve")
install.packages("lpSolve")
library(lpSolve)
A<-matrix(c(1,3,2,2,3,4,0,0,0),nrow=3,byrow=TRUE)
ejemplo<-lp.transport(A,"min",c("=","=","="),c(100,50,40),c("=","=","="),c(50,70,70))
ejemplo
A<-matrix(c(10,5,6,12,8,11),nrow=3,byrow=TRUE)
ejemplo<-lp.transport(A,"max",c("=","="),c(800,300),c("=","=","="),c(200,400,500))
A<-matrix(c(10,5,6,12,8,11),nrow=2,byrow=TRUE)
ejemplo<-lp.transport(A,"max",c("=","="),c(800,300),c("=","=","="),c(200,400,500))
ejemplo
library(lpSolve)
A<-matrix(c(10,5,6,12,8,11),nrow=2,byrow=TRUE)
ejemplo<-lp.transport(A,"max",c("=","="),c(800,300),c("=","=","="),c(200,400,500))
ejemplo
ejemplo$solution
lp.transport(A,"max",c("=","="),c(800,300),c("=","=","="),c(200,400,500))
names(ejemplo)
B<-matrix(c(10,5,12,8),nrow=2,byrow=TRUE)
ejemplo2<-lp.transport(B,"max",c("=","="),c(800,300),c("=","="),c(200,400))
library(lpSolve)
B<-matrix(c(10,5,12,8),nrow=2,byrow=TRUE)
ejemplo2<-lp.transport(B,"max",c("=","="),c(800,300),c("=","="),c(200,400))
ejemplo2
ejemplo2<-lp.transport(B,"max",c("<=","<="),c(800,300),c("<=","<="),c(200,400))
ejemplo2
ejemplo2$solution
B<-matrix(c(10,6,12,11),nrow=2,byrow=TRUE)
ejemplo2<-lp.transport(B,"max",c("<=","<="),c(800,300),c("<=","<="),c(200,500))
ejemplo2
ejemplo2$solution
B<-matrix(c(5,6,8,11),nrow=2,byrow=TRUE)
ejemplo2<-lp.transport(B,"max",c("<=","<="),c(800,300),c("<=","<="),c(400,500))
ejemplo2
ejemplo2$solution
library(igraph)
E<-rbind(c(1,2,7),c(1,3,3),c(2,4,6),c(2,3,1),c(3,5,8),c(4,3,3),c(4,6,2),c(5,4,2),c(5,6,8))
View(E)
colnames(E)<-c("desde","hasta","capacidad")
g<-graph_from_data_frame(as.data.frame(E))
g
max_flow(g,source=V(g)["1"],target=V(g)["6"],capacity=c(7,3,6,1,8,3,2,2,8))
E<-rbind(c(1,2,10),c(1,3,4),c(1,4,6),c(1,5,4),c(2,4,6),c(2,6,5),c(3,5,8),c(4,6,5),c(5,6,10))
colnames(E)<-c("desde","hasta","capacidad")
g<-graph_from_data_frame(as.data.frame(E))
g
max_flow(g,source=V(g)["1"],target=V(g)["6"],capacity=c(7,3,6,1,8,3,2,2,8))
View(E)
max_flow(g,source=V(g)["1"],target=V(g)["6"],capacity=c(10,4,6,4,6,5,8,5,10))
v<-c(0,5,4,10,4,14,18)
drawCore(v)
library(CoopGame)
v<-c(0,5,4,10,4,14,18)
drawCore(v)
shapleyValue(v)
w<-c(0,0,0,1,0,1,1)
banzhafValue((w))
library(igraph)
E<-rbind(c(1,2,10),c(1,3,4),c(1,4,6),c(1,5,4),c(2,4,6),c(2,6,5),c(3,5,8),c(4,6,5),c(5,6,10))
colnames(E)<-c("desde","hasta","capacidad")
g<-graph_from_data_frame(as.data.frame(E))
g
max_flow(g,source=V(g)["1"],target=V(g)["6"],capacity=c(10,4,6,4,6,5,8,5,10))
library(CoopGame)
v<-c(0,5,4,10,4,14,18)
drawCore(v)
shapleyValue(v)
B<-matrix(c(5,6,8,11),nrow=2,byrow=TRUE)
ejemplo2<-lp.transport(B,"max",c("<=","<="),c(800,300),c("<=","<="),c(400,500))
library(lpSolve)
A<-matrix(c(10,5,6,12,8,11),nrow=2,byrow=TRUE)
ejemplo<-lp.transport(A,"max",c("=","="),c(800,300),c("=","=","="),c(200,400,500))
ejemplo
ejemplo$solution
B<-matrix(c(5,6,8,11),nrow=2,byrow=TRUE)
ejemplo2<-lp.transport(B,"max",c("<=","<="),c(800,300),c("<=","<="),c(400,500))
ejemplo2
ejemplo2$solution
library(CoopGame)
v<-c(0,0,0,0,0,0,2000,2000,3000,2400,2400,3300,0,0,0,2400,2900,4500,4000,5000,4500,3200,3500,3300,0,4900,6500,6500,5500,3500,8500)
shapleyValue(v)
library(readxl)
PruebaR <- read_excel("Alberto/MU TE/TFM/Excel/PruebaR.xlsx")
View(PruebaR)
PruebaR$Ano
PruebaR$`Data ingreso`=="2016-01-15"
count(PruebaR$`Data ingreso`=="2016-01-15")
sum(PruebaR$`Data ingreso`=="2016-01-15")
sum(PruebaR$`Data ingreso`=="2016-02-17")
PruebaR$`Data ingreso`=="2016-02-17"
PruebaR$`Data ingreso`
sum(PruebaR$`Data ingreso`=="2016-01-15 UTC")
sum(PruebaR$`Data ingreso`=="2016-05-18 UTC")
PruebaR$`Data ingreso`=="2016-02-17 UTC"
Ingreso<-PruebaR$`Data ingreso`
Ingreso
Ingreso[1]
Ingreso=="2016-02-17 UTC"
Ingreso==2016-02-17 UTC
Ingreso==""2016-02-17 UTC""
Ingreso=="2016-02-17"
Ingreso[1]
Ingreso[1]==
"2016-02-17 UTC"
Sexo<-PruebaR$Sexo
Sexo=="Home"
Sexo=="HOME"
as.character(Ingreso)
Ingreso
class(Sexo)
class(Ingreso)
Ingreso<-as.Date(PruebaR$`Data ingreso`)
Ingreso=="2016-02-17"
Diagn<-PruebaR$`Diagnóstico principal`
table(Diagn)
AreaDiag<-PruebaR$`GFH alta`
Ingreso=="2016-02-17"&AreaDiag=="NEUMOLOXIA HCU"
sum(Ingreso=="2016-02-17"&AreaDiag=="NEUMOLOXIA HCU")
sum(Ingreso=="2016-02-17")
sum(Ingreso=="2016-02-17"&AreaDiag=="NEUMOLOXIA HCU")
sum(Ingreso=="2016-02-18"&AreaDiag=="NEUMOLOXIA HCU")
sum(Ingreso=="2016-02-19"&AreaDiag=="NEUMOLOXIA HCU")
sum(PruebaR$Ano==2016)
unique(PruebaR$`Id. hospitalización`)
PruebaR$`Id. hospitalización`
sum(Ingreso=="2016-02-19"&AreaDiag %in% c("NEUMOLOXIA HCU","NEUMOLOXIA HCX")
)
sum(Ingreso=="2016-02-19"&AreaDiag %in% c("NEUMOLOXIA HCU","NEUMOLOXIA HCX"))
sum(Ingreso=="2016-02-19"&AreaDiag=="NEUMOLOXIA HCX")
sum(Ingreso=="2016-02-19"&AreaDiag=="NEUMOLOXIA HCU")
sum(Ingreso=="2016-02-19"&AreaDiag %in% c("NEUMOLOXIA HCU","NEUMOLOXIA HCX"))
iniquinc<-as.Date("2016-01-15")
finquinc<-as.Date("2016-01-31")
seq(iniquinc,finquinc)
seq(iniquinc,finquinc,length(=1))
seq(iniquinc,finquinc,length=1)
seq(iniquinc,finquinc,by="day")
quincenero<-seq(iniquinc,finquinc,by="day")
sum(Ingreso %in% quincenero & AreaDiag %in% c("NEUMOLOXIA HCU","NEUMOLOXIA HCX"))
data_matrix <- matrix(c(
0, 100, 0, 0, 0, 0,
1230, 89.6419306, 6.909263389, 2.890122721, 0.039374599, 0.519308689,
3060, 76.18283585, 15.88703975, 5.205721854, 0.196928867, 2.527473676,
4920, 64.57208431, 23.63189427, 6.18287932, 0.41713729, 5.196004811,
7800, 49.98636089, 33.36117884, 6.443039239, 0.794580315, 9.414840711,
10680, 38.69530157, 40.89278534, 6.135117364, 1.167205899, 13.10958982,
15030, 26.28512492, 49.17088967, 5.47814962, 1.685010605, 17.38082518,
22620, 13.38657304, 57.77476062, 4.590323196, 2.462584527, 21.78575862,
36420, 3.925258583, 64.08585114, 3.824193463, 3.634875999, 24.52982082
), nrow = 9, byrow = TRUE)
if (!requireNamespace("deSolve", quietly = TRUE)) {
install.packages("deSolve")
}
library(deSolve)
ode_system <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dy1 <- -(p1 + p2) * y1
dy2 <- p1 * y1
dy3 <- p2 * y1 - (p3 + p4) * y3 + p5 * y5
dy4 <- p3 * y3
dy5 <- p4 * y3 - p5 * y5
return(list(c(dy1, dy2, dy3, dy4, dy5)))
})
}
solve_ode <- function(parameters) {
# Initial values for y1 to y5
initial_values <- c(y1 = 100, y2 = 0, y3 = 0, y4 = 0, y5 = 0)
# Time points for which to solve the ODEs
times <- c(0,1230, 3060, 4920, 7800, 10680, 15030, 22620, 36420)
# Solve the ODE system
solution <- ode(y = initial_values, times = times, func = ode_system, parms = parameters, method = "ode45")
return(solution)
}
calculate_mse <- function(parameters) {
# Resuelve el sistema de ecuaciones diferenciales con los parámetros dados
solution <- solve_ode(parameters)
# Obtiene la variable y1 (la primera columna de la solución)
# Calcula el error cuadrático medio
mse <- 0
for( i in 1:5){
y1_predicted <- solution[,i+1]
mseaux <- mean((observed_data[,i] - y1_predicted)^2)
mse= mse + mseaux
# Calcula el error cuadrático medio
}
return(mse)
}
data_matrix <- matrix(c(
0, 100, 0, 0, 0, 0,
1230, 89.6419306, 6.909263389, 2.890122721, 0.039374599, 0.519308689,
3060, 76.18283585, 15.88703975, 5.205721854, 0.196928867, 2.527473676,
4920, 64.57208431, 23.63189427, 6.18287932, 0.41713729, 5.196004811,
7800, 49.98636089, 33.36117884, 6.443039239, 0.794580315, 9.414840711,
10680, 38.69530157, 40.89278534, 6.135117364, 1.167205899, 13.10958982,
15030, 26.28512492, 49.17088967, 5.47814962, 1.685010605, 17.38082518,
22620, 13.38657304, 57.77476062, 4.590323196, 2.462584527, 21.78575862,
36420, 3.925258583, 64.08585114, 3.824193463, 3.634875999, 24.52982082
), nrow = 9, byrow = TRUE)
# Install and load the deSolve package
if (!requireNamespace("deSolve", quietly = TRUE)) {
install.packages("deSolve")
}
library(deSolve)
# Define the ODE system
ode_system <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dy1 <- -(p1 + p2) * y1
dy2 <- p1 * y1
dy3 <- p2 * y1 - (p3 + p4) * y3 + p5 * y5
dy4 <- p3 * y3
dy5 <- p4 * y3 - p5 * y5
return(list(c(dy1, dy2, dy3, dy4, dy5)))
})
}
# Function to solve the ODE system and return the solution
solve_ode <- function(parameters) {
# Initial values for y1 to y5
initial_values <- c(y1 = 100, y2 = 0, y3 = 0, y4 = 0, y5 = 0)
# Time points for which to solve the ODEs
times <- c(0,1230, 3060, 4920, 7800, 10680, 15030, 22620, 36420)
# Solve the ODE system
solution <- ode(y = initial_values, times = times, func = ode_system, parms = parameters, method = "ode45")
return(solution)
}
# Example usage:
# Set initial parameter values
parameters <- c(p1 = 0.1, p2 = 0.2, p3 = 0.3, p4 = 0.4, p5 = 0.5)
# Solve the ODE system with the initial parameters
solution <- solve_ode(parameters)
# Print the results
print(solution)
observed_data <- data_matrix[, 2:6]
# Función para calcular el error cuadrático medio
calculate_mse <- function(parameters) {
# Resuelve el sistema de ecuaciones diferenciales con los parámetros dados
solution <- solve_ode(parameters)
# Obtiene la variable y1 (la primera columna de la solución)
# Calcula el error cuadrático medio
mse <- 0
for( i in 1:5){
y1_predicted <- solution[,i+1]
mseaux <- mean((observed_data[,i] - y1_predicted)^2)
mse= mse + mseaux
# Calcula el error cuadrático medio
}
return(mse)
}
# Función de optimización para encontrar los parámetros que minimizan el error cuadrático medio
#  optimal_parameters <- optim(par = c(p1 = 0.1, p2 = 0.1, p3 = 0.1, p4 = 0.1, p5 = 0.1), fn = calculate_mse, method = "SANN")
# #
# # # Parámetros óptimos
#  optimal_params <- optimal_parameters$par
#  print(optimal_params)
parameters_vector <- c(p1 = 5.93e-5, p2 = 2.96e-5, p3 = 2.05e-5, p4 = 27.5e-5, p5 = 4e-5)
parameters= parameters_vector
solution <- solve_ode(parameters_vector)
calculate_mse(parameters_vector)
py=9
# Split the dataset into two parts: the first 5 observations and the last 4 observations
# For practical purposes, we use the first split to estimate the model
media1 = solution[1:5, 2:6]  # Estimated means for the first 5 observations
real = observed_data[1:5, 1:5]  # Observed data for the first 5 observations
residuos1 = real - media1  # Residuals for the first split
# In the second split, we estimate the quantile
media2 = solution[6:9, 2:6]  # Estimated means for the last 4 observations
real2 = observed_data[6:9, 1:5]  # Observed data for the last 4 observations
residuos2 = real2 - media2  # Residuals for the second split
# We define the non-conformity score
S = abs(residuos2)
# For each time, we define a mathematical criterion as the maximum of different coordinates
scores = apply(S, 1, max)
# Calculate the quantile
q = quantile(scores, probs = c(0.4))
# Define the upper and lower regions for the last four times
regionsi = media2 - q
regionss = media2 + q
library(outbreaks)
library(tidyverse)
library(posterior)
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
library(rstan)
library(gridExtra)
rstan_options (auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
# time series of cases
cases <- influenza_england_1978_school$in_bed  # Number of students in bed
# total count
N <- 763;
# times
n_days <- length(cases)
t <- seq(0, n_days, by = 1)
t0 = 0
t <- t[-1]
#initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# data for Stan
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases)
setwd("C:/Users/Usuario/Documents/Alberto/MBG-CSIC/CARPETAS FIN/Uncertainty_Quantification/Conformal Jackknife/STAN/STAN_logistic")
library(rstan)
library(dplyr)
library(tidyr)
library(ggplot2)
library(R.matlab)
library(deSolve)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
datos_in <- readMat('logistic_data_homoc_noise_0.10_size_10_data_1.mat')
time <- datos_in$data.matrix[,1] # Primera columna para tiempos
absorbance <- datos_in$data.matrix[,2] # Segunda columna para los valores del estado
n_dat <- length(absorbance)
well <- rep("A1",n_dat)
long_growthdata=data.frame(time,absorbance,well)
stan_file <- 'logistic_paper2.stan'
logisticgrowth_stan <- stan_model(file = stan_file)
logisticgrowth_stan <- stan_model(file = stan_file)
setwd("C:/Users/Usuario/Documents/Alberto/MBG-CSIC/CUQDyn_v6Sept2024/CUQDyn/STAN/Logistic")
library(rstan)
library(dplyr)
library(tidyr)
library(ggplot2)
library(R.matlab)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
datos_in <- readMat('logistic_data_homoc_noise_0.01_size_10_data_1.mat')
time <- datos_in$data.matrix[,1] # Time points
absorbance <- datos_in$data.matrix[,2] # State values
datos_in <- readMat('logistic_data_homoc_noise_0.10_size_10_data_1.mat')
time <- datos_in$data.matrix[,1] # Time points
absorbance <- datos_in$data.matrix[,2] # State values
n_dat <- length(absorbance)
well <- rep("A1",n_dat)
long_growthdata=data.frame(time,absorbance,well)
stan_file <- 'Logistic_STAN.stan'
logisticgrowth_stan <- stan_model(file = stan_file)
install.packages("rstan")
install.packages("rstan")
library(rstan)
rstan_options(auto_write = TRUE)
library(rstan)
install.packages("StanHeaders")
library(StanHeaders)
library(dplyr)
library(tidyr)
library(ggplot2)
library(R.matlab)
rstan_options(auto_write = TRUE)
library(rstan)
library(StanHeaders)
library(rstan)
install.packages("stanHeaders")
install.packages("StanHeaders")
install.packages("StanHeaders")
install.packages("rstan")
library(rstan)
remove.packages("StanHeaders")
install.packages("StanHeaders")
